const e=JSON.parse('{"key":"v-23f9e731","path":"/Java/design-patterns/","title":"软件设计原则","lang":"zh-CN","frontmatter":{"description":"软件设计原则 在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。 开闭原则 对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。 想要达到这样的效果，我们需要使用接口和抽象类。 因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/Java/design-patterns/"}],["meta",{"property":"og:site_name","content":"七分熟"}],["meta",{"property":"og:title","content":"软件设计原则"}],["meta",{"property":"og:description","content":"软件设计原则 在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。 开闭原则 对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。 想要达到这样的效果，我们需要使用接口和抽象类。 因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T06:41:14.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"软件设计原则"}],["meta",{"property":"article:author","content":"七分熟"}],["meta",{"property":"article:modified_time","content":"2024-05-30T06:41:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"软件设计原则\\",\\"image\\":[\\"https://vuepress-theme-hope-v2-demo.mrhope.site/\\"],\\"dateModified\\":\\"2024-05-30T06:41:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"七分熟\\",\\"url\\":\\"https://github.com/panslong\\"}]}"]]},"headers":[{"level":3,"title":"开闭原则","slug":"开闭原则","link":"#开闭原则","children":[]},{"level":3,"title":"里氏代换原则","slug":"里氏代换原则","link":"#里氏代换原则","children":[]},{"level":3,"title":"依赖倒转原则","slug":"依赖倒转原则","link":"#依赖倒转原则","children":[]},{"level":3,"title":"接口隔离原则","slug":"接口隔离原则","link":"#接口隔离原则","children":[]},{"level":3,"title":"迪米特法则","slug":"迪米特法则","link":"#迪米特法则","children":[]},{"level":3,"title":"合成复用原则","slug":"合成复用原则","link":"#合成复用原则","children":[]}],"git":{"createdTime":1702523067000,"updatedTime":1717051274000,"contributors":[{"name":"panshuilong","email":"1063589459@qq.com","commits":2}]},"readingTime":{"minutes":4.48,"words":1344},"filePathRelative":"Java/design-patterns/README.md","localizedDate":"2023年12月14日","excerpt":"<h1> 软件设计原则</h1>\\n<p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p>\\n<h3> 开闭原则</h3>\\n<p><strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。</p>\\n<p>想要达到这样的效果，我们需要使用接口和抽象类。</p>\\n<p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p>","autoDesc":true}');export{e as data};
