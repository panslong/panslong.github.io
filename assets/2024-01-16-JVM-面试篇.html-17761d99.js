const l=JSON.parse('{"key":"v-076deecb","path":"/Java/JVM/2024-01-16-JVM-%E9%9D%A2%E8%AF%95%E7%AF%87.html","title":"JVM-面试篇","lang":"zh-CN","frontmatter":{"title":"JVM-面试篇","icon":"article","date":"2021-01-16T00:00:00.000Z","category":"JVM","tag":["面试"],"description":"1.什么是JVM 1.1定义 JVM 指的是Java虚拟机（ Java Virtual Machine ）。JVM 本质上是一个运行在计算机上的程序，他的职责是运行Java字节码文件，Java虚拟机上可以运行Java、Kotlin、Scala、Groovy等语言。 1.2作用 为了支持Java中Write Once，Run Anywhere；编写一次，到处运行的跨平台特性。 1.3JVM的功能 解释和运行 对字节码文件中的指令， 实时的解释成机器码， 让计算机执行","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/Java/JVM/2024-01-16-JVM-%E9%9D%A2%E8%AF%95%E7%AF%87.html"}],["meta",{"property":"og:site_name","content":"七分熟"}],["meta",{"property":"og:title","content":"JVM-面试篇"}],["meta",{"property":"og:description","content":"1.什么是JVM 1.1定义 JVM 指的是Java虚拟机（ Java Virtual Machine ）。JVM 本质上是一个运行在计算机上的程序，他的职责是运行Java字节码文件，Java虚拟机上可以运行Java、Kotlin、Scala、Groovy等语言。 1.2作用 为了支持Java中Write Once，Run Anywhere；编写一次，到处运行的跨平台特性。 1.3JVM的功能 解释和运行 对字节码文件中的指令， 实时的解释成机器码， 让计算机执行"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-19T07:26:33.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"JVM-面试篇"}],["meta",{"property":"article:author","content":"七分熟"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2021-01-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-19T07:26:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM-面试篇\\",\\"image\\":[\\"https://vuepress-theme-hope-v2-demo.mrhope.site/\\"],\\"datePublished\\":\\"2021-01-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-19T07:26:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"七分熟\\",\\"url\\":\\"https://github.com/panslong\\"}]}"]]},"headers":[{"level":2,"title":"1.什么是JVM","slug":"_1-什么是jvm","link":"#_1-什么是jvm","children":[{"level":3,"title":"1.1定义","slug":"_1-1定义","link":"#_1-1定义","children":[]},{"level":3,"title":"1.2作用","slug":"_1-2作用","link":"#_1-2作用","children":[]},{"level":3,"title":"1.3JVM的功能","slug":"_1-3jvm的功能","link":"#_1-3jvm的功能","children":[]},{"level":3,"title":"1.4JVM的组成","slug":"_1-4jvm的组成","link":"#_1-4jvm的组成","children":[]},{"level":3,"title":"1.5常见的JVM","slug":"_1-5常见的jvm","link":"#_1-5常见的jvm","children":[]},{"level":3,"title":"1.6总结","slug":"_1-6总结","link":"#_1-6总结","children":[]}]},{"level":2,"title":"2.字节码文件的组成","slug":"_2-字节码文件的组成","link":"#_2-字节码文件的组成","children":[]},{"level":2,"title":"3.说一下运行时数据区","slug":"_3-说一下运行时数据区","link":"#_3-说一下运行时数据区","children":[{"level":3,"title":"3.1程序计数器","slug":"_3-1程序计数器","link":"#_3-1程序计数器","children":[]},{"level":3,"title":"3.2栈 - Java虚拟机栈","slug":"_3-2栈-java虚拟机栈","link":"#_3-2栈-java虚拟机栈","children":[]},{"level":3,"title":"3.3本地方法栈","slug":"_3-3本地方法栈","link":"#_3-3本地方法栈","children":[]},{"level":3,"title":"3.4堆","slug":"_3-4堆","link":"#_3-4堆","children":[]},{"level":3,"title":"3.5方法区","slug":"_3-5方法区","link":"#_3-5方法区","children":[]},{"level":3,"title":"3.6总结","slug":"_3-6总结","link":"#_3-6总结","children":[]}]},{"level":2,"title":"4.哪些区域会出现内存溢出，会有什么现象？","slug":"_4-哪些区域会出现内存溢出-会有什么现象","link":"#_4-哪些区域会出现内存溢出-会有什么现象","children":[{"level":3,"title":"4.1堆内存溢出：","slug":"_4-1堆内存溢出","link":"#_4-1堆内存溢出","children":[]},{"level":3,"title":"4.2栈内存溢出：","slug":"_4-2栈内存溢出","link":"#_4-2栈内存溢出","children":[]},{"level":3,"title":"4.3方法区内存溢出：","slug":"_4-3方法区内存溢出","link":"#_4-3方法区内存溢出","children":[]},{"level":3,"title":"4.4直接内存溢出：","slug":"_4-4直接内存溢出","link":"#_4-4直接内存溢出","children":[]},{"level":3,"title":"4.5总结","slug":"_4-5总结","link":"#_4-5总结","children":[]}]},{"level":2,"title":"5.JDK6-8之间在内存区域上有什么不同","slug":"_5-jdk6-8之间在内存区域上有什么不同","link":"#_5-jdk6-8之间在内存区域上有什么不同","children":[{"level":3,"title":"5.1方法区的实现","slug":"_5-1方法区的实现","link":"#_5-1方法区的实现","children":[]},{"level":3,"title":"5.2字符串常量池的位置","slug":"_5-2字符串常量池的位置","link":"#_5-2字符串常量池的位置","children":[]}]},{"level":2,"title":"6.类的生命周期","slug":"_6-类的生命周期","link":"#_6-类的生命周期","children":[{"level":3,"title":"6.1加载阶段","slug":"_6-1加载阶段","link":"#_6-1加载阶段","children":[]},{"level":3,"title":"6.2连接阶段","slug":"_6-2连接阶段","link":"#_6-2连接阶段","children":[]},{"level":3,"title":"6.3初始化阶段","slug":"_6-3初始化阶段","link":"#_6-3初始化阶段","children":[]},{"level":3,"title":"6.4类的卸载","slug":"_6-4类的卸载","link":"#_6-4类的卸载","children":[]},{"level":3,"title":"6.5总结","slug":"_6-5总结","link":"#_6-5总结","children":[]}]},{"level":2,"title":"7.什么是类加载器，有哪些常见的类加载器","slug":"_7-什么是类加载器-有哪些常见的类加载器","link":"#_7-什么是类加载器-有哪些常见的类加载器","children":[{"level":3,"title":"7.1启动类加载器","slug":"_7-1启动类加载器","link":"#_7-1启动类加载器","children":[]},{"level":3,"title":"7.2扩展类加载器","slug":"_7-2扩展类加载器","link":"#_7-2扩展类加载器","children":[]},{"level":3,"title":"7.3应用程序类加载器","slug":"_7-3应用程序类加载器","link":"#_7-3应用程序类加载器","children":[]},{"level":3,"title":"7.4自定义类加载器","slug":"_7-4自定义类加载器","link":"#_7-4自定义类加载器","children":[]},{"level":3,"title":"7.5总结","slug":"_7-5总结","link":"#_7-5总结","children":[]}]},{"level":2,"title":"8.什么是双亲委派机制","slug":"_8-什么是双亲委派机制","link":"#_8-什么是双亲委派机制","children":[]},{"level":2,"title":"9.如何打破双亲委派机制？","slug":"_9-如何打破双亲委派机制","link":"#_9-如何打破双亲委派机制","children":[]},{"level":2,"title":"10.Tomcat的自定义类加载器","slug":"_10-tomcat的自定义类加载器","link":"#_10-tomcat的自定义类加载器","children":[]},{"level":2,"title":"11.如何判断堆上的对象没有被引用？","slug":"_11-如何判断堆上的对象没有被引用","link":"#_11-如何判断堆上的对象没有被引用","children":[]},{"level":2,"title":"12.JVM 中都有哪些引用类型","slug":"_12-jvm-中都有哪些引用类型","link":"#_12-jvm-中都有哪些引用类型","children":[]},{"level":2,"title":"13.ThreadLocal中为什么要使用弱引用？","slug":"_13-threadlocal中为什么要使用弱引用","link":"#_13-threadlocal中为什么要使用弱引用","children":[]},{"level":2,"title":"14.有哪些常见的垃圾回收算法？","slug":"_14-有哪些常见的垃圾回收算法","link":"#_14-有哪些常见的垃圾回收算法","children":[{"level":3,"title":"14.1标记清除算法","slug":"_14-1标记清除算法","link":"#_14-1标记清除算法","children":[]},{"level":3,"title":"14.2复制算法","slug":"_14-2复制算法","link":"#_14-2复制算法","children":[]},{"level":3,"title":"14.3标记整理算法","slug":"_14-3标记整理算法","link":"#_14-3标记整理算法","children":[]},{"level":3,"title":"14.4分代垃圾回收算法","slug":"_14-4分代垃圾回收算法","link":"#_14-4分代垃圾回收算法","children":[]}]},{"level":2,"title":"15.有哪些常用的垃圾回收器","slug":"_15-有哪些常用的垃圾回收器","link":"#_15-有哪些常用的垃圾回收器","children":[{"level":3,"title":"15.1 Serial + SerialOld","slug":"_15-1-serial-serialold","link":"#_15-1-serial-serialold","children":[]},{"level":3,"title":"15.2Parallel Scavenge垃圾回收器 + Parallel Old垃圾回收器","slug":"_15-2parallel-scavenge垃圾回收器-parallel-old垃圾回收器","link":"#_15-2parallel-scavenge垃圾回收器-parallel-old垃圾回收器","children":[]},{"level":3,"title":"15.3年轻代-ParNew垃圾回收器","slug":"_15-3年轻代-parnew垃圾回收器","link":"#_15-3年轻代-parnew垃圾回收器","children":[]},{"level":3,"title":"15.4老年代- CMS(Concurrent Mark Sweep)垃圾回收器","slug":"_15-4老年代-cms-concurrent-mark-sweep-垃圾回收器","link":"#_15-4老年代-cms-concurrent-mark-sweep-垃圾回收器","children":[]},{"level":3,"title":"15.5 G1 – Garbage First 垃圾回收器","slug":"_15-5-g1-–-garbage-first-垃圾回收器","link":"#_15-5-g1-–-garbage-first-垃圾回收器","children":[]},{"level":3,"title":"15.6总结","slug":"_15-6总结","link":"#_15-6总结","children":[]}]},{"level":2,"title":"16.如何解决内存泄漏问题","slug":"_16-如何解决内存泄漏问题","link":"#_16-如何解决内存泄漏问题","children":[{"level":3,"title":"16.1 发现问题 – 堆内存状况的对比","slug":"_16-1-发现问题-–-堆内存状况的对比","link":"#_16-1-发现问题-–-堆内存状况的对比","children":[]},{"level":3,"title":"16.2 诊断 – 生成内存快照","slug":"_16-2-诊断-–-生成内存快照","link":"#_16-2-诊断-–-生成内存快照","children":[]},{"level":3,"title":"16.3修复问题","slug":"_16-3修复问题","link":"#_16-3修复问题","children":[]},{"level":3,"title":"16.4常用的JVM工具","slug":"_16-4常用的jvm工具","link":"#_16-4常用的jvm工具","children":[]}]},{"level":2,"title":"17.常见的JVM参数","slug":"_17-常见的jvm参数","link":"#_17-常见的jvm参数","children":[]}],"git":{"createdTime":1724052393000,"updatedTime":1724052393000,"contributors":[{"name":"panshuilong","email":"1063589459@qq.com","commits":1}]},"readingTime":{"minutes":30.62,"words":9186},"filePathRelative":"Java/JVM/2024-01-16-JVM-面试篇.md","localizedDate":"2021年1月16日","excerpt":"<h2> 1.什么是JVM</h2>\\n<h3> 1.1定义</h3>\\n<p>JVM 指的是Java虚拟机（ Java Virtual Machine ）。JVM 本质上是一个运行在计算机上的程序，他的职责是运行Java字节码文件，Java虚拟机上可以运行Java、Kotlin、Scala、Groovy等语言。</p>\\n<h3> 1.2作用</h3>\\n<p>为了支持Java中Write Once，Run Anywhere；编写一次，到处运行的跨平台特性。</p>\\n<h3> 1.3JVM的功能</h3>\\n<h4> 解释和运行</h4>\\n<p>对字节码文件中的指令， 实时的解释成机器码， 让计算机执行</p>","autoDesc":true}');export{l as data};
