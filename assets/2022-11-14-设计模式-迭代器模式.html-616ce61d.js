const e=JSON.parse('{"key":"v-60804ef7","path":"/Java/design-patterns/behavioral-patterns/2022-11-14-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"迭代器模式","lang":"zh-CN","frontmatter":{"title":"迭代器模式","icon":"article","date":"2022-11-14T00:00:00.000Z","category":"设计模式","tag":["设计模式","行为型模式"],"description":"概述 定义： 提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。 结构 迭代器模式主要包含以下角色： 抽象聚合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。 具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。 抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、next() 等方法。 具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/Java/design-patterns/behavioral-patterns/2022-11-14-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"七分熟"}],["meta",{"property":"og:title","content":"迭代器模式"}],["meta",{"property":"og:description","content":"概述 定义： 提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。 结构 迭代器模式主要包含以下角色： 抽象聚合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。 具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。 抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、next() 等方法。 具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-14T03:04:27.000Z"}],["meta",{"property":"article:author","content":"七分熟"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"行为型模式"}],["meta",{"property":"article:published_time","content":"2022-11-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-14T03:04:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"迭代器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-14T03:04:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"七分熟\\",\\"url\\":\\"https://github.com/panslong\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":2,"title":"案例实现","slug":"案例实现","link":"#案例实现","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"JDK源码解析","slug":"jdk源码解析","link":"#jdk源码解析","children":[]}],"git":{"createdTime":1702523067000,"updatedTime":1702523067000,"contributors":[{"name":"panshuilong","email":"1063589459@qq.com","commits":1}]},"readingTime":{"minutes":3.82,"words":1147},"filePathRelative":"Java/design-patterns/behavioral-patterns/2022-11-14-设计模式-迭代器模式.md","localizedDate":"2022年11月14日","excerpt":"<h2> 概述</h2>\\n<p><strong>定义：</strong></p>\\n<p>提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</p>\\n<h2> 结构</h2>\\n<p>迭代器模式主要包含以下角色：</p>\\n<ul>\\n<li>\\n<p>抽象聚合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。</p>\\n</li>\\n<li>\\n<p>具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</p>\\n</li>\\n<li>\\n<p>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、next() 等方法。</p>\\n</li>\\n<li>\\n<p>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
