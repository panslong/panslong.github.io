const e=JSON.parse('{"key":"v-b442cab4","path":"/Java/JVM/2024-03-21-JVM-%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"JVM-高频面试题","lang":"zh-CN","frontmatter":{"title":"JVM-高频面试题","icon":"article","date":"2024-03-21T00:00:00.000Z","category":"JVM","tag":["面试"],"description":"1、类的生命周期 一个类完整的生命周期，会经历五个阶段，分别为：加载、连接、初始化、使用、和卸载。其中的连接又分为验证、准备和解析三个步骤 加载（Loading） 简单一句话概括，类的加载阶段就是：找到需要加载的类并把类的信息加载到jvm的方法区中，然后在堆区中实例化一个java.lang.Class对象，作为方法区中这个类的信息的入口。结合jvm的内存结构会比较好理解。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/Java/JVM/2024-03-21-JVM-%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"七分熟"}],["meta",{"property":"og:title","content":"JVM-高频面试题"}],["meta",{"property":"og:description","content":"1、类的生命周期 一个类完整的生命周期，会经历五个阶段，分别为：加载、连接、初始化、使用、和卸载。其中的连接又分为验证、准备和解析三个步骤 加载（Loading） 简单一句话概括，类的加载阶段就是：找到需要加载的类并把类的信息加载到jvm的方法区中，然后在堆区中实例化一个java.lang.Class对象，作为方法区中这个类的信息的入口。结合jvm的内存结构会比较好理解。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-19T07:48:50.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"JVM-高频面试题"}],["meta",{"property":"article:author","content":"七分熟"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2024-03-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-19T07:48:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM-高频面试题\\",\\"image\\":[\\"https://vuepress-theme-hope-v2-demo.mrhope.site/\\"],\\"datePublished\\":\\"2024-03-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-19T07:48:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"七分熟\\",\\"url\\":\\"https://github.com/panslong\\"}]}"]]},"headers":[{"level":2,"title":"1、类的生命周期","slug":"_1、类的生命周期","link":"#_1、类的生命周期","children":[{"level":3,"title":"加载（Loading）","slug":"加载-loading","link":"#加载-loading","children":[]},{"level":3,"title":"连接（Linking）","slug":"连接-linking","link":"#连接-linking","children":[]},{"level":3,"title":"初始化(Initialization)","slug":"初始化-initialization","link":"#初始化-initialization","children":[]},{"level":3,"title":"使用（Using）","slug":"使用-using","link":"#使用-using","children":[]},{"level":3,"title":"卸载（(Unloading）","slug":"卸载-unloading","link":"#卸载-unloading","children":[]}]},{"level":2,"title":"2、类加载器， JVM类加载机制","slug":"_2、类加载器-jvm类加载机制","link":"#_2、类加载器-jvm类加载机制","children":[]},{"level":2,"title":"3、能说一下JVM的内存区域吗？","slug":"_3、能说一下jvm的内存区域吗","link":"#_3、能说一下jvm的内存区域吗","children":[]},{"level":2,"title":"4、对象创建的过程了解吗？","slug":"_4、对象创建的过程了解吗","link":"#_4、对象创建的过程了解吗","children":[]},{"level":2,"title":"5、对象内存分配方式","slug":"_5、对象内存分配方式","link":"#_5、对象内存分配方式","children":[]},{"level":2,"title":"6、JVM 里 new 对象时，堆会发生抢占吗？JVM是怎么设计来保证线程安全的？","slug":"_6、jvm-里-new-对象时-堆会发生抢占吗-jvm是怎么设计来保证线程安全的","link":"#_6、jvm-里-new-对象时-堆会发生抢占吗-jvm是怎么设计来保证线程安全的","children":[]},{"level":2,"title":"7、对象的内存布局","slug":"_7、对象的内存布局","link":"#_7、对象的内存布局","children":[]},{"level":2,"title":"8.内存泄漏可能由哪些原因导致呢？","slug":"_8-内存泄漏可能由哪些原因导致呢","link":"#_8-内存泄漏可能由哪些原因导致呢","children":[]},{"level":2,"title":"9.如何判断对象仍然存活？","slug":"_9-如何判断对象仍然存活","link":"#_9-如何判断对象仍然存活","children":[]},{"level":2,"title":"10.垃圾收集算法了解吗？","slug":"_10-垃圾收集算法了解吗","link":"#_10-垃圾收集算法了解吗","children":[]},{"level":2,"title":"11. 三色标记算法了解吗","slug":"_11-三色标记算法了解吗","link":"#_11-三色标记算法了解吗","children":[]},{"level":2,"title":"12.能详细说一下CMS收集器的垃圾收集过程吗？","slug":"_12-能详细说一下cms收集器的垃圾收集过程吗","link":"#_12-能详细说一下cms收集器的垃圾收集过程吗","children":[]},{"level":2,"title":"13.G1垃圾收集器了解吗？","slug":"_13-g1垃圾收集器了解吗","link":"#_13-g1垃圾收集器了解吗","children":[]},{"level":2,"title":"14.有了CMS，为什么还要引入G1？","slug":"_14-有了cms-为什么还要引入g1","link":"#_14-有了cms-为什么还要引入g1","children":[]},{"level":2,"title":"15.你们线上用的什么垃圾收集器？为什么要用它？","slug":"_15-你们线上用的什么垃圾收集器-为什么要用它","link":"#_15-你们线上用的什么垃圾收集器-为什么要用它","children":[]},{"level":2,"title":"16.垃圾收集器应该如何选择？","slug":"_16-垃圾收集器应该如何选择","link":"#_16-垃圾收集器应该如何选择","children":[]},{"level":2,"title":"17.对象一定分配在堆中吗？有没有了解逃逸分析技术？","slug":"_17-对象一定分配在堆中吗-有没有了解逃逸分析技术","link":"#_17-对象一定分配在堆中吗-有没有了解逃逸分析技术","children":[]},{"level":2,"title":"18.了解哪些性JVM监控和故障处理工具？","slug":"_18-了解哪些性jvm监控和故障处理工具","link":"#_18-了解哪些性jvm监控和故障处理工具","children":[]},{"level":2,"title":"19.JVM的常见参数配置知道哪些？","slug":"_19-jvm的常见参数配置知道哪些","link":"#_19-jvm的常见参数配置知道哪些","children":[]},{"level":2,"title":"20.有没有进行过JVM调优，说说你的调优思路？","slug":"_20-有没有进行过jvm调优-说说你的调优思路","link":"#_20-有没有进行过jvm调优-说说你的调优思路","children":[{"level":3,"title":"JVM调优的一般步骤为：","slug":"jvm调优的一般步骤为","link":"#jvm调优的一般步骤为","children":[]},{"level":3,"title":"分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点","slug":"分析gc日志及dump文件-判断是否需要优化-确定瓶颈问题点","link":"#分析gc日志及dump文件-判断是否需要优化-确定瓶颈问题点","children":[]},{"level":3,"title":"有用过哪些JVM调优参数吗？","slug":"有用过哪些jvm调优参数吗","link":"#有用过哪些jvm调优参数吗","children":[]}]},{"level":2,"title":"21.线上服务CPU占用过高怎么排查？","slug":"_21-线上服务cpu占用过高怎么排查","link":"#_21-线上服务cpu占用过高怎么排查","children":[{"level":3,"title":"启动 Arthas","slug":"启动-arthas","link":"#启动-arthas","children":[]},{"level":3,"title":"dashboard — 展示整体情况","slug":"dashboard-—-展示整体情况","link":"#dashboard-—-展示整体情况","children":[]},{"level":3,"title":"thread — 查看高CPU的线程","slug":"thread-—-查看高cpu的线程","link":"#thread-—-查看高cpu的线程","children":[]},{"level":3,"title":"watch — 监控参数","slug":"watch-—-监控参数","link":"#watch-—-监控参数","children":[]},{"level":3,"title":"jad — 反编译","slug":"jad-—-反编译","link":"#jad-—-反编译","children":[]},{"level":3,"title":"redefine — 重载类","slug":"redefine-—-重载类","link":"#redefine-—-重载类","children":[]}]},{"level":2,"title":"22.内存飙高问题怎么排查？","slug":"_22-内存飙高问题怎么排查","link":"#_22-内存飙高问题怎么排查","children":[]},{"level":2,"title":"23.频繁 minor gc 怎么办？","slug":"_23-频繁-minor-gc-怎么办","link":"#_23-频繁-minor-gc-怎么办","children":[]},{"level":2,"title":"24.频繁Full GC怎么办？","slug":"_24-频繁full-gc怎么办","link":"#_24-频繁full-gc怎么办","children":[]},{"level":2,"title":"25.有没有处理过内存溢出(OOM)问题？是如何定位的？","slug":"_25-有没有处理过内存溢出-oom-问题-是如何定位的","link":"#_25-有没有处理过内存溢出-oom-问题-是如何定位的","children":[{"level":3,"title":"MAT 分析OOM问题的思路","slug":"mat-分析oom问题的思路","link":"#mat-分析oom问题的思路","children":[]},{"level":3,"title":"总览图 — 快速分析OOM问题","slug":"总览图-—-快速分析oom问题","link":"#总览图-—-快速分析oom问题","children":[]},{"level":3,"title":"直方图 — 定位根源","slug":"直方图-—-定位根源","link":"#直方图-—-定位根源","children":[]},{"level":3,"title":"线程栈 — 分析代码","slug":"线程栈-—-分析代码","link":"#线程栈-—-分析代码","children":[]}]}],"git":{"createdTime":1724052393000,"updatedTime":1724053730000,"contributors":[{"name":"panshuilong","email":"1063589459@qq.com","commits":2}]},"readingTime":{"minutes":57.88,"words":17363},"filePathRelative":"Java/JVM/2024-03-21-JVM-高频面试题.md","localizedDate":"2024年3月21日","excerpt":"<h2> 1、类的生命周期</h2>\\n<p>一个类完整的生命周期，会经历五个阶段，分别为：<strong>加载、连接、初始化、使用</strong>、和<strong>卸载</strong>。其中的连接又分为<strong>验证、准备</strong>和<strong>解析</strong>三个步骤</p>\\n<h3> 加载（Loading）</h3>\\n<p>简单一句话概括，类的加载阶段就是：<strong>找到需要加载的类并把类的信息加载到jvm的方法区中，然后在堆区中实例化一个java.lang.Class对象，作为方法区中这个类的信息的入口</strong>。结合jvm的内存结构会比较好理解。</p>","autoDesc":true}');export{e as data};
