import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,d as l}from"./app-de394487.js";const n="/assets/20240304104538-05087499.png",o="/assets/20240304105628-9a54f3a6.png",t={},r=l('<h2 id="ribbon负载均衡流程" tabindex="-1"><a class="header-anchor" href="#ribbon负载均衡流程" aria-hidden="true">#</a> Ribbon负载均衡流程</h2><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="ribbon-支持的-7-种负载均衡策略" tabindex="-1"><a class="header-anchor" href="#ribbon-支持的-7-种负载均衡策略" aria-hidden="true">#</a> Ribbon 支持的 7 种负载均衡策略：</h2><ul><li>RoundRobinRule（默认）：简单轮询服务列表来选择服务器</li><li>RandomRule：随机选择一个可用的服务器</li><li>WeightedResponseTimeRule：按照权重来选择服务器，响应时间越长，权重越小</li><li>BestAvailableRule：最小连接数策略，忽略那些短路的服务器，并选择并发数较低的服务器</li><li>RetryRule：重试策略（按照轮询策略来获取服务，如果获取的服务实例为 null 或已经失效，则在指定的时间之内不断地进行重试来获取服务，如果超过指定时间依然没获取到服务实例则返回 null）</li><li>AvailabilityFilteringRule：可用性敏感策略，先过滤非健康的，再选择连接数较小的实例</li><li>ZoneAvoidanceRule：以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询</li></ul><h2 id="自定义负载均衡策略如何实现" tabindex="-1"><a class="header-anchor" href="#自定义负载均衡策略如何实现" aria-hidden="true">#</a> 自定义负载均衡策略如何实现 ?</h2><ol><li><p>创建类实现IRule接口，可以指定负载均衡策略，这个是全局的，对所有的远程调用都起作用</p></li><li><p>在客户端的配置文件中，可以配置某一个服务调用的负载均衡策略，只是对配置的这个服务生效远程调用</p></li></ol><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',7),s=[r];function c(d,_){return e(),a("div",null,s)}const h=i(t,[["render",c],["__file","2023-03-04-Ribbon负载均衡策略.html.vue"]]);export{h as default};
