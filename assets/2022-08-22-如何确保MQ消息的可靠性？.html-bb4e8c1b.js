const e=JSON.parse('{"key":"v-35c8b19c","path":"/distributed/RabbitMQ/2022-08-22-%E5%A6%82%E4%BD%95%E7%A1%AE%E4%BF%9DMQ%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%EF%BC%9F.html","title":"如何确保MQ消息的可靠性？","lang":"zh-CN","frontmatter":{"title":"如何确保MQ消息的可靠性？","icon":"article","date":"2022-08-22T00:00:00.000Z","category":"RabbitMQ","tag":["RabbitMQ"],"description":"首先，我们分析一下消息丢失的可能性有哪些。 消息从发送者发送消息，到消费者处理消息，需要经过的流程是这样的： 消息从生产者到消费者的每一步都可能导致消息丢失： 发送消息时丢失： 生产者发送消息时连接MQ失败 生产者发送消息到达MQ后未找到Exchange 生产者发送消息到达MQ的Exchange后，未找到合适的Queue 消息到达MQ后，处理消息的进程发生异常 MQ导致消息丢失： 消息到达MQ，保存到队列后，尚未消费就突然宕机 消费者处理消息时： 消息接收后尚未处理突然宕机 消息接收后处理过程中抛出异常","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/distributed/RabbitMQ/2022-08-22-%E5%A6%82%E4%BD%95%E7%A1%AE%E4%BF%9DMQ%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"七分熟"}],["meta",{"property":"og:title","content":"如何确保MQ消息的可靠性？"}],["meta",{"property":"og:description","content":"首先，我们分析一下消息丢失的可能性有哪些。 消息从发送者发送消息，到消费者处理消息，需要经过的流程是这样的： 消息从生产者到消费者的每一步都可能导致消息丢失： 发送消息时丢失： 生产者发送消息时连接MQ失败 生产者发送消息到达MQ后未找到Exchange 生产者发送消息到达MQ的Exchange后，未找到合适的Queue 消息到达MQ后，处理消息的进程发生异常 MQ导致消息丢失： 消息到达MQ，保存到队列后，尚未消费就突然宕机 消费者处理消息时： 消息接收后尚未处理突然宕机 消息接收后处理过程中抛出异常"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-12T01:57:03.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"如何确保MQ消息的可靠性？"}],["meta",{"property":"article:author","content":"七分熟"}],["meta",{"property":"article:tag","content":"RabbitMQ"}],["meta",{"property":"article:published_time","content":"2022-08-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-12T01:57:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何确保MQ消息的可靠性？\\",\\"image\\":[\\"https://vuepress-theme-hope-v2-demo.mrhope.site/\\"],\\"datePublished\\":\\"2022-08-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-12T01:57:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"七分熟\\",\\"url\\":\\"https://github.com/panslong\\"}]}"]]},"headers":[{"level":2,"title":"1.1生产者重试机制","slug":"_1-1生产者重试机制","link":"#_1-1生产者重试机制","children":[]},{"level":2,"title":"1.2生产者确认机制","slug":"_1-2生产者确认机制","link":"#_1-2生产者确认机制","children":[]},{"level":2,"title":"1.3实现生产者确认","slug":"_1-3实现生产者确认","link":"#_1-3实现生产者确认","children":[{"level":3,"title":"1.3.1.开启生产者确认","slug":"_1-3-1-开启生产者确认","link":"#_1-3-1-开启生产者确认","children":[]},{"level":3,"title":"1.3.2定义ReturnCallback","slug":"_1-3-2定义returncallback","link":"#_1-3-2定义returncallback","children":[]},{"level":3,"title":"1.3.3定义ConfirmCallback","slug":"_1-3-3定义confirmcallback","link":"#_1-3-3定义confirmcallback","children":[]}]},{"level":2,"title":"2.1.数据持久化","slug":"_2-1-数据持久化","link":"#_2-1-数据持久化","children":[{"level":3,"title":"2.1.1.交换机持久化","slug":"_2-1-1-交换机持久化","link":"#_2-1-1-交换机持久化","children":[]},{"level":3,"title":"2.1.2.队列持久化","slug":"_2-1-2-队列持久化","link":"#_2-1-2-队列持久化","children":[]},{"level":3,"title":"2.1.3.消息持久化","slug":"_2-1-3-消息持久化","link":"#_2-1-3-消息持久化","children":[]}]},{"level":2,"title":"2.2.LazyQueue","slug":"_2-2-lazyqueue","link":"#_2-2-lazyqueue","children":[{"level":3,"title":"2.2.1.控制台配置Lazy模式","slug":"_2-2-1-控制台配置lazy模式","link":"#_2-2-1-控制台配置lazy模式","children":[]},{"level":3,"title":"2.2.2.代码配置Lazy模式","slug":"_2-2-2-代码配置lazy模式","link":"#_2-2-2-代码配置lazy模式","children":[]},{"level":3,"title":"2.2.3.更新已有队列为lazy模式","slug":"_2-2-3-更新已有队列为lazy模式","link":"#_2-2-3-更新已有队列为lazy模式","children":[]}]},{"level":2,"title":"3.1.消费者确认机制","slug":"_3-1-消费者确认机制","link":"#_3-1-消费者确认机制","children":[]},{"level":2,"title":"3.2.失败重试机制","slug":"_3-2-失败重试机制","link":"#_3-2-失败重试机制","children":[]},{"level":2,"title":"3.3.失败处理策略","slug":"_3-3-失败处理策略","link":"#_3-3-失败处理策略","children":[]},{"level":2,"title":"3.4.业务幂等性","slug":"_3-4-业务幂等性","link":"#_3-4-业务幂等性","children":[{"level":3,"title":"3.4.1.唯一消息ID","slug":"_3-4-1-唯一消息id","link":"#_3-4-1-唯一消息id","children":[]},{"level":3,"title":"3.4.2.业务判断","slug":"_3-4-2-业务判断","link":"#_3-4-2-业务判断","children":[]}]}],"git":{"createdTime":1702346223000,"updatedTime":1702346223000,"contributors":[{"name":"panshuilong","email":"1063589459@qq.com","commits":1}]},"readingTime":{"minutes":17.1,"words":5130},"filePathRelative":"distributed/RabbitMQ/2022-08-22-如何确保MQ消息的可靠性？.md","localizedDate":"2022年8月22日","excerpt":"<p>首先，我们分析一下消息丢失的可能性有哪些。</p>\\n<p>消息从发送者发送消息，到消费者处理消息，需要经过的流程是这样的：</p>\\n<figure><figcaption></figcaption></figure>\\n<p>消息从生产者到消费者的每一步都可能导致消息丢失：</p>\\n<ul>\\n<li>发送消息时丢失：\\n<ul>\\n<li>生产者发送消息时连接MQ失败</li>\\n<li>生产者发送消息到达MQ后未找到<code>Exchange</code></li>\\n<li>生产者发送消息到达MQ的<code>Exchange</code>后，未找到合适的<code>Queue</code></li>\\n<li>消息到达MQ后，处理消息的进程发生异常</li>\\n</ul>\\n</li>\\n<li>MQ导致消息丢失：\\n<ul>\\n<li>消息到达MQ，保存到队列后，尚未消费就突然宕机</li>\\n</ul>\\n</li>\\n<li>消费者处理消息时：\\n<ul>\\n<li>消息接收后尚未处理突然宕机</li>\\n<li>消息接收后处理过程中抛出异常</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
