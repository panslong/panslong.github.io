const e=JSON.parse('{"key":"v-835b5e72","path":"/Java/JVM/2022-11-10-JVM-%E5%AE%9E%E6%88%98%E7%AF%871.html","title":"JVM | 实战篇1","lang":"zh-CN","frontmatter":{"title":"JVM | 实战篇1","icon":"article","date":"2022-11-10T00:00:00.000Z","category":"JVM","tag":["JVM"],"description":"一、内存溢出和内存泄漏 内存泄漏：在Java中如果不再使用一个对象，但是该对象依然在GC ROOT的引用链上，这个对象就不会被垃圾回收器回收，这种情况称之为内存泄漏 内存泄漏绝大多数情况都是由堆内存泄漏引起的 少量的内存泄漏可以容忍，但是如果发生持续的内存泄漏，就像滚雪球越滚越大，不管多大的内存迟早会被消耗完，最终导致的结果就是内存溢出。但是产生内存溢出并不是只有内存泄漏这一种原因 内存泄漏导致溢出的常见场景是大型的Java后端 应用中，在处理用户的请求之后，没有及时将用户的数据删除。随着用户请求数量越来越多，内存泄漏的对象占满了堆内存最终导致内存溢出","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/Java/JVM/2022-11-10-JVM-%E5%AE%9E%E6%88%98%E7%AF%871.html"}],["meta",{"property":"og:site_name","content":"七分熟"}],["meta",{"property":"og:title","content":"JVM | 实战篇1"}],["meta",{"property":"og:description","content":"一、内存溢出和内存泄漏 内存泄漏：在Java中如果不再使用一个对象，但是该对象依然在GC ROOT的引用链上，这个对象就不会被垃圾回收器回收，这种情况称之为内存泄漏 内存泄漏绝大多数情况都是由堆内存泄漏引起的 少量的内存泄漏可以容忍，但是如果发生持续的内存泄漏，就像滚雪球越滚越大，不管多大的内存迟早会被消耗完，最终导致的结果就是内存溢出。但是产生内存溢出并不是只有内存泄漏这一种原因 内存泄漏导致溢出的常见场景是大型的Java后端 应用中，在处理用户的请求之后，没有及时将用户的数据删除。随着用户请求数量越来越多，内存泄漏的对象占满了堆内存最终导致内存溢出"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-12T03:49:58.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"JVM | 实战篇1"}],["meta",{"property":"article:author","content":"七分熟"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2022-11-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-12T03:49:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM | 实战篇1\\",\\"image\\":[\\"https://vuepress-theme-hope-v2-demo.mrhope.site/\\"],\\"datePublished\\":\\"2022-11-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-12T03:49:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"七分熟\\",\\"url\\":\\"https://github.com/panslong\\"}]}"]]},"headers":[{"level":2,"title":"1、equals和hashCode导致的内存泄漏","slug":"_1、equals和hashcode导致的内存泄漏","link":"#_1、equals和hashcode导致的内存泄漏","children":[]},{"level":2,"title":"2、内部类引用外部类","slug":"_2、内部类引用外部类","link":"#_2、内部类引用外部类","children":[]},{"level":2,"title":"3、ThreadLocal的使用","slug":"_3、threadlocal的使用","link":"#_3、threadlocal的使用","children":[]},{"level":2,"title":"4、String的intern方法","slug":"_4、string的intern方法","link":"#_4、string的intern方法","children":[]},{"level":2,"title":"5、通过静态字段保存对象","slug":"_5、通过静态字段保存对象","link":"#_5、通过静态字段保存对象","children":[]},{"level":2,"title":"6、资源没有正常关闭","slug":"_6、资源没有正常关闭","link":"#_6、资源没有正常关闭","children":[]},{"level":2,"title":"1、查询大数据量导致的内存溢出","slug":"_1、查询大数据量导致的内存溢出","link":"#_1、查询大数据量导致的内存溢出","children":[]},{"level":2,"title":"2、mybatis导致的内存溢出","slug":"_2、mybatis导致的内存溢出","link":"#_2、mybatis导致的内存溢出","children":[]},{"level":2,"title":"3、导出大文件内存溢出","slug":"_3、导出大文件内存溢出","link":"#_3、导出大文件内存溢出","children":[]},{"level":2,"title":"4、ThreadLocal内存泄漏","slug":"_4、threadlocal内存泄漏","link":"#_4、threadlocal内存泄漏","children":[]},{"level":2,"title":"5、文章内容审核接口的内存溢出","slug":"_5、文章内容审核接口的内存溢出","link":"#_5、文章内容审核接口的内存溢出","children":[]}],"git":{"createdTime":1702352998000,"updatedTime":1702352998000,"contributors":[{"name":"panshuilong","email":"1063589459@qq.com","commits":1}]},"readingTime":{"minutes":10.04,"words":3012},"filePathRelative":"Java/JVM/2022-11-10-JVM-实战篇1.md","localizedDate":"2022年11月10日","excerpt":"<h1> 一、内存溢出和内存泄漏</h1>\\n<ul>\\n<li>内存泄漏：在Java中如果不再使用一个对象，但是该对象依然在GC ROOT的引用链上，这个对象就不会被垃圾回收器回收，这种情况称之为内存泄漏</li>\\n<li>内存泄漏绝大多数情况都是由堆内存泄漏引起的</li>\\n<li>少量的内存泄漏可以容忍，但是如果发生持续的内存泄漏，就像滚雪球越滚越大，不管多大的内存迟早会被消耗完，最终导致的结果就是内存溢出。但是产生内存溢出并不是只有内存泄漏这一种原因</li>\\n<li>内存泄漏导致溢出的常见场景是大型的Java后端 应用中，在处理用户的请求之后，没有及时将用户的数据删除。随着用户请求数量越来越多，内存泄漏的对象占满了堆内存最终导致内存溢出</li>\\n</ul>","autoDesc":true}');export{e as data};
