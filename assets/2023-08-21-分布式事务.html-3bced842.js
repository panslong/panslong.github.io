const e=JSON.parse('{"key":"v-a0e5a532","path":"/distributed/distributed/2023-08-21-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html","title":"分布式事务","lang":"zh-CN","frontmatter":{"title":"分布式事务","icon":"article","date":"2023-12-15T00:00:00.000Z","category":"分布式","tag":["分布式事务"],"description":"一、本地事务 1、事务的基本性质 事务的概念：事务是逻辑上一组操作，组成这组操作各个逻辑单元，要么一起成功，要么一起失败。 事务的四个特性（ACID）： 原子性(atomicity)：“原子”的本意是“不可再分”，事务的原子性表现为一个事务中涉及到的多个操作在逻辑上缺一不可。事务的原子性要求事务中的所有操作要么都执行，要么都不执行。 一致性(consistency)：“一致”指的是数据的一致，具体是指：所有数据都处于满足业务规则的一致性状态。一致性原则要求：一个事务中不管涉及到多少个操作，都必须保证事务执行之前数据是正确的，事务执行之后数据仍然是正确的。如果一个事务在执行的过程中，其中某一个或某几个操作失败了，则必须将其他所有操作撤销，将数据恢复到事务执行之前的状态，这就是回滚。 隔离性(isolation)：在应用程序实际运行过程中，事务往往是并发执行的，所以很有可能有许多事务同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。隔离性原则要求多个事务在并发执行过程中不会互相干扰。 持久性(durability)：持久性原则要求事务执行完成后，对数据的修改永久的保存下来，不会因各种系统错误或其他意外情况而受到影响。通常情况下，事务对数据的修改应该被写入到持久化存储器中。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/distributed/distributed/2023-08-21-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"七分熟"}],["meta",{"property":"og:title","content":"分布式事务"}],["meta",{"property":"og:description","content":"一、本地事务 1、事务的基本性质 事务的概念：事务是逻辑上一组操作，组成这组操作各个逻辑单元，要么一起成功，要么一起失败。 事务的四个特性（ACID）： 原子性(atomicity)：“原子”的本意是“不可再分”，事务的原子性表现为一个事务中涉及到的多个操作在逻辑上缺一不可。事务的原子性要求事务中的所有操作要么都执行，要么都不执行。 一致性(consistency)：“一致”指的是数据的一致，具体是指：所有数据都处于满足业务规则的一致性状态。一致性原则要求：一个事务中不管涉及到多少个操作，都必须保证事务执行之前数据是正确的，事务执行之后数据仍然是正确的。如果一个事务在执行的过程中，其中某一个或某几个操作失败了，则必须将其他所有操作撤销，将数据恢复到事务执行之前的状态，这就是回滚。 隔离性(isolation)：在应用程序实际运行过程中，事务往往是并发执行的，所以很有可能有许多事务同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。隔离性原则要求多个事务在并发执行过程中不会互相干扰。 持久性(durability)：持久性原则要求事务执行完成后，对数据的修改永久的保存下来，不会因各种系统错误或其他意外情况而受到影响。通常情况下，事务对数据的修改应该被写入到持久化存储器中。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T06:41:14.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"分布式事务"}],["meta",{"property":"article:author","content":"七分熟"}],["meta",{"property":"article:tag","content":"分布式事务"}],["meta",{"property":"article:published_time","content":"2023-12-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-30T06:41:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式事务\\",\\"image\\":[\\"https://vuepress-theme-hope-v2-demo.mrhope.site/\\"],\\"datePublished\\":\\"2023-12-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-30T06:41:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"七分熟\\",\\"url\\":\\"https://github.com/panslong\\"}]}"]]},"headers":[{"level":2,"title":"1、事务的基本性质","slug":"_1、事务的基本性质","link":"#_1、事务的基本性质","children":[]},{"level":2,"title":"2、事务的隔离级别","slug":"_2、事务的隔离级别","link":"#_2、事务的隔离级别","children":[]},{"level":2,"title":"3、相关命令","slug":"_3、相关命令","link":"#_3、相关命令","children":[]},{"level":2,"title":"4、传播行为","slug":"_4、传播行为","link":"#_4、传播行为","children":[]},{"level":2,"title":"5、SpringBoot 事务关键点","slug":"_5、springboot-事务关键点","link":"#_5、springboot-事务关键点","children":[]},{"level":2,"title":"2.1 分布式事务基础","slug":"_2-1-分布式事务基础","link":"#_2-1-分布式事务基础","children":[{"level":3,"title":"2.1.1. CAP","slug":"_2-1-1-cap","link":"#_2-1-1-cap","children":[]},{"level":3,"title":"2.1.2. BASE","slug":"_2-1-2-base","link":"#_2-1-2-base","children":[]},{"level":3,"title":"2.1.3 强一致性、弱一致性、最终一致性","slug":"_2-1-3-强一致性、弱一致性、最终一致性","link":"#_2-1-3-强一致性、弱一致性、最终一致性","children":[]}]},{"level":2,"title":"2.2. 分布式事务解决方案","slug":"_2-2-分布式事务解决方案","link":"#_2-2-分布式事务解决方案","children":[{"level":3,"title":"2.2.1. 两阶段提交（2PC）","slug":"_2-2-1-两阶段提交-2pc","link":"#_2-2-1-两阶段提交-2pc","children":[]},{"level":3,"title":"2.2.2. TCC补偿式事务","slug":"_2-2-2-tcc补偿式事务","link":"#_2-2-2-tcc补偿式事务","children":[]},{"level":3,"title":"2.2.3 柔性事务-最大努力通知型方案","slug":"_2-2-3-柔性事务-最大努力通知型方案","link":"#_2-2-3-柔性事务-最大努力通知型方案","children":[]},{"level":3,"title":"2.2.4 消息事务+最终一致性","slug":"_2-2-4-消息事务-最终一致性","link":"#_2-2-4-消息事务-最终一致性","children":[]}]},{"level":2,"title":"Seata有3个基本组件：","slug":"seata有3个基本组件","link":"#seata有3个基本组件","children":[]},{"level":2,"title":"快速入门案例的启示","slug":"快速入门案例的启示","link":"#快速入门案例的启示","children":[{"level":3,"title":"前提：日志表","slug":"前提-日志表","link":"#前提-日志表","children":[]},{"level":3,"title":"先看依赖","slug":"先看依赖","link":"#先看依赖","children":[]},{"level":3,"title":"再看配置","slug":"再看配置","link":"#再看配置","children":[]},{"level":3,"title":"最后注解","slug":"最后注解","link":"#最后注解","children":[]},{"level":3,"title":"seata-server","slug":"seata-server","link":"#seata-server","children":[]}]}],"git":{"createdTime":1717051274000,"updatedTime":1717051274000,"contributors":[{"name":"panshuilong","email":"1063589459@qq.com","commits":1}]},"readingTime":{"minutes":18.9,"words":5671},"filePathRelative":"distributed/distributed/2023-08-21-分布式事务.md","localizedDate":"2023年12月15日","excerpt":"<h1> 一、本地事务</h1>\\n<h2> 1、事务的基本性质</h2>\\n<p>事务的概念：事务是逻辑上一组操作，组成这组操作各个逻辑单元，要么一起成功，要么一起失败。</p>\\n<p>事务的四个特性（ACID）：</p>\\n<ol>\\n<li>原子性(atomicity)：“原子”的本意是“<strong>不可再分</strong>”，事务的原子性表现为一个事务中涉及到的多个操作在逻辑上缺一不可。事务的原子性要求事务中的所有操作要么都执行，要么都不执行。</li>\\n<li>一致性(consistency)：“一致”指的是数据的一致，具体是指：所有数据都处于满足业务规则的一致性状态。一致性原则要求：一个事务中不管涉及到多少个操作，都必须保证<strong>事务执行之前</strong>数据是正确的，<strong>事务执行之后</strong>数据仍然是正确的。如果一个事务在执行的过程中，其中某一个或某几个操作失败了，则必须将其他所有操作撤销，将数据恢复到事务执行之前的状态，这就是回滚。</li>\\n<li>隔离性(isolation)：在应用程序实际运行过程中，事务往往是并发执行的，所以很有可能有许多事务同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。隔离性原则要求多个事务在<strong>并发执行过程中不会互相干扰</strong>。</li>\\n<li>持久性(durability)：持久性原则要求事务执行完成后，对数据的修改永久的保存下来，不会因各种系统错误或其他意外情况而受到影响。通常情况下，事务对数据的修改应该被写入到<strong>持久化存储器</strong>中。</li>\\n</ol>","autoDesc":true}');export{e as data};
