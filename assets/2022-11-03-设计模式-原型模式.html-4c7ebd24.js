const e=JSON.parse('{"key":"v-0b9aa48d","path":"/Java/design-patterns/creational-patterns/2022-11-03-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html","title":"原型模式","lang":"zh-CN","frontmatter":{"title":"原型模式","icon":"article","date":"2022-11-03T00:00:00.000Z","category":"设计模式","tag":["设计模式","创建者模式"],"description":"概述 用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。 结构 原型模式包含如下角色： 抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。 具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。 访问类：使用具体原型类中的 clone() 方法来复制新的对象。 接口类图如下： 原型模式的克隆分为浅克隆和深克隆。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/Java/design-patterns/creational-patterns/2022-11-03-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"七分熟"}],["meta",{"property":"og:title","content":"原型模式"}],["meta",{"property":"og:description","content":"概述 用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。 结构 原型模式包含如下角色： 抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。 具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。 访问类：使用具体原型类中的 clone() 方法来复制新的对象。 接口类图如下： 原型模式的克隆分为浅克隆和深克隆。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T06:41:14.000Z"}],["meta",{"property":"article:author","content":"七分熟"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"创建者模式"}],["meta",{"property":"article:published_time","content":"2022-11-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-30T06:41:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-30T06:41:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"七分熟\\",\\"url\\":\\"https://github.com/panslong\\"}]}"]]},"headers":[{"level":3,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":3,"title":"扩展（深克隆）","slug":"扩展-深克隆","link":"#扩展-深克隆","children":[]}],"git":{"createdTime":1717051274000,"updatedTime":1717051274000,"contributors":[{"name":"panshuilong","email":"1063589459@qq.com","commits":1}]},"readingTime":{"minutes":3.92,"words":1177},"filePathRelative":"Java/design-patterns/creational-patterns/2022-11-03-设计模式-原型模式.md","localizedDate":"2022年11月3日","excerpt":"<h3> 概述</h3>\\n<p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</p>\\n<h3> 结构</h3>\\n<p>原型模式包含如下角色：</p>\\n<ul>\\n<li>抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。</li>\\n<li>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li>\\n<li>访问类：使用具体原型类中的 clone() 方法来复制新的对象。</li>\\n</ul>\\n<p>接口类图如下：</p>\\n<figure><figcaption></figcaption></figure>\\n<p>原型模式的克隆分为浅克隆和深克隆。</p>","autoDesc":true}');export{e as data};
