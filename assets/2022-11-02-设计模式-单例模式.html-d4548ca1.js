const t=JSON.parse('{"key":"v-567dbe14","path":"/Java/design-patterns/creational-patterns/2022-11-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","title":"单例模式","lang":"zh-CN","frontmatter":{"title":"单例模式","icon":"article","date":"2022-11-02T00:00:00.000Z","category":"设计模式","tag":["设计模式","创建者模式"],"description":"单例设计模式 单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。 这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。 1.1 单例模式的结构 单例模式的主要有以下角色： 单例类。只能创建一个实例的类 访问类。使用单例类 1.2 单例模式的实现","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/Java/design-patterns/creational-patterns/2022-11-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"七分熟"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"单例设计模式 单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。 这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。 1.1 单例模式的结构 单例模式的主要有以下角色： 单例类。只能创建一个实例的类 访问类。使用单例类 1.2 单例模式的实现"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-14T03:04:27.000Z"}],["meta",{"property":"article:author","content":"七分熟"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"创建者模式"}],["meta",{"property":"article:published_time","content":"2022-11-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-14T03:04:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-14T03:04:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"七分熟\\",\\"url\\":\\"https://github.com/panslong\\"}]}"]]},"headers":[{"level":2,"title":"单例设计模式","slug":"单例设计模式","link":"#单例设计模式","children":[{"level":3,"title":"1.1 单例模式的结构","slug":"_1-1-单例模式的结构","link":"#_1-1-单例模式的结构","children":[]},{"level":3,"title":"1.2 单例模式的实现","slug":"_1-2-单例模式的实现","link":"#_1-2-单例模式的实现","children":[]},{"level":3,"title":"1.3 存在的问题","slug":"_1-3-存在的问题","link":"#_1-3-存在的问题","children":[]},{"level":3,"title":"1.4 JDK源码解析-Runtime类","slug":"_1-4-jdk源码解析-runtime类","link":"#_1-4-jdk源码解析-runtime类","children":[]}]}],"git":{"createdTime":1702523067000,"updatedTime":1702523067000,"contributors":[{"name":"panshuilong","email":"1063589459@qq.com","commits":1}]},"readingTime":{"minutes":10.63,"words":3190},"filePathRelative":"Java/design-patterns/creational-patterns/2022-11-02-设计模式-单例模式.md","localizedDate":"2022年11月2日","excerpt":"<h2> 单例设计模式</h2>\\n<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\\n<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\\n<h3> 1.1 单例模式的结构</h3>\\n<p>单例模式的主要有以下角色：</p>\\n<ul>\\n<li>单例类。只能创建一个实例的类</li>\\n<li>访问类。使用单例类</li>\\n</ul>\\n<h3> 1.2 单例模式的实现</h3>","autoDesc":true}');export{t as data};
